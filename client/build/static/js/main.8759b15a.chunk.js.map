{"version":3,"sources":["components/Monty.js","components/Chat.js","components/Square.js","components/Board.js","components/App.js","index.js"],"names":["Monty","react_default","a","createElement","className","Chat","Square","_this","this","onClick","props","value","Component","Board","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","renderBackButton","Link","to","state","isOver","isAWinner","player1","squares","Array","fill","isGameOver","setState","includes","i","squaresCopy","slice","_this2","components_Square","handleClick","currentPlayer","renderSquare","_this3","renderBoard","App","ReactDOM","render","BrowserRouter","Route","exact","path","component","document","querySelector"],"mappings":"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","file":"static/js/main.8759b15a.chunk.js","sourcesContent":["import React from 'react';\nimport \"../styles/Monty.css\";\n\nconst Monty = () => {\n    return (\n        <div className=\"montyMiddle\">\n            <h2>Monty Hall Problem</h2>\n        </div>\n    );\n}\n\nexport default Monty;","import React from 'react';\nimport \"../styles/Chat.css\";\n\nconst Chat = () => {\n    return (\n        <div className=\"chatMiddle\">\n            <h2>This is the chat component</h2>\n        </div>\n    );\n}\n\nexport default Chat;","import React, { Component } from 'react';\n\n\nclass Square extends Component {\n\n\n    render() {\n        return(\n            <button className=\"square\" onClick={() => this.props.onClick() }>\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nexport default Square;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport \"../css/board.css\";\nimport Square from './Square';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOver: false,\n            isAWinner: false,\n            player1: true,\n            squares: Array(9).fill(null),\n        };\n    }\n\n    // Everytime the component re-renders, I want to ask if the game is currently over\n    // When a user clicks on a square, they change the state of squares, and \n    componentDidUpdate() {\n        if(!this.state.isOver) {\n            this.isGameOver();\n        }\n    }\n\n    // This checks if the game should end or continue to keep going.\n    // There are eight comparisons that I check.\n    isGameOver() {\n        if(\n            (this.state.squares[0] === this.state.squares[1] && this.state.squares[1] === this.state.squares[2] && null !== this.state.squares[2])\n            ||\n            (this.state.squares[3] === this.state.squares[4] && this.state.squares[4] === this.state.squares[5] && null !== this.state.squares[5])\n            ||\n            (this.state.squares[6] === this.state.squares[7] && this.state.squares[7] === this.state.squares[8] && null !== this.state.squares[8])\n            ||\n            (this.state.squares[0] === this.state.squares[3] && this.state.squares[3] === this.state.squares[6] && null !== this.state.squares[6])\n            ||\n            (this.state.squares[1] === this.state.squares[4] && this.state.squares[4] === this.state.squares[7] && null !== this.state.squares[7])\n            ||\n            (this.state.squares[2] === this.state.squares[5] && this.state.squares[5] === this.state.squares[8] && null !== this.state.squares[8])\n            ||\n            (this.state.squares[0] === this.state.squares[4] && this.state.squares[4] === this.state.squares[8] && null !== this.state.squares[8])\n            ||\n            (this.state.squares[6] === this.state.squares[4] && this.state.squares[4] === this.state.squares[2] && null !== this.state.squares[2])\n            ) \n            {\n                // If there are three in a row, then I want isOver to be true.\n                this.setState({ isOver: true, isAWinner: true })\n            } \n            // I should also check if the game is over, because there is a draw.\n            // This occurs when there is not a winner, and there are no null spaces in the array.\n            // If the array contains null, then this will return true. I will flip it.\n            // If the array doesn't include null, then the game is over.\n            else if (!this.state.squares.includes(null)) {\n                this.setState( { isOver: true })\n            }\n    }\n\n    // Event Handler for when a player clicks on a square.\n    handleClick(i) {\n\n        // Don't mutate the state! Create a new array.\n        const squaresCopy = this.state.squares.slice();\n        \n        // I need to check if the square that they are selecting has been played yet.\n        // If it is null, allow the move to happen.\n        if(this.state.squares[i] === null) {\n\n            // Check whos turn it is, and then use correct X or O\n            squaresCopy[i] = (this.state.player1 ? \"X\" : \"O\");        \n\n            // Set the state of the game to be the new state.\n            this.setState({ squares: squaresCopy });\n\n            // Change the whos turn it is to go\n            (this.state.player1 ? this.setState({ player1: false }) : this.setState({ player1: true}));\n        }\n    }\n\n    renderSquare(i) {\n        return (\n            <Square\n                value={ this.state.squares[i] } \n                onClick={ () => this.handleClick(i) }\n            />\n        );\n    }\n\n    renderBoard() {\n        const currentPlayer = (this.state.player1 ? \"Player 1\" : \"Player 2\");\n        return (\n            <div className=\"boardContainer\">\n                <div className=\"status\">It is {currentPlayer}'s turn</div>\n\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}{this.renderSquare(1)}{this.renderSquare(2)}\n                </div>\n\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}{this.renderSquare(4)}{this.renderSquare(5)}\n                </div>\n                \n                <div className=\"board-row\">\n                    {this.renderSquare(6)}{this.renderSquare(7)}{this.renderSquare(8)}\n                </div>\n            </div> \n        )\n    }\n\n    renderBackButton = () => {\n        return(\n            <Link to=\"/\"><button>Go back to home page</button></Link>\n        );\n    }\n\n    render() {\n    // Game is not over, and there is no winner\n    if(!this.state.isOver && !this.state.isAWinner) {\n        return (\n            <div className=\"notOver\">\n                {this.renderBackButton()}\n                {this.renderBoard()}\n            </div>\n        );\n    // Game is over, but there is not a winner\n    } else if(this.state.isOver && !this.state.isAWinner){\n        // render yellow\n        return (\n            <div className=\"overNoWinner\">\n                {this.renderBackButton()}\n                {this.renderBoard()}\n                <button onClick={() => this.setState({ squares: Array(9).fill(null), isOver: false, isAWinner: false, player1: true })}>Play Again</button>\n            </div>\n        );\n    // The game is over, and there is a winner\n    } else {\n        return (\n            <div className=\"over\">\n                {this.renderBackButton()}\n                {this.renderBoard()}\n                <button onClick={() => this.setState({ squares: Array(9).fill(null), isOver: false, player1: true, isAWinner: false })}>Play Again</button>\n            </div>\n        );\n    }\n        \n    }\n}\n\nexport default Board;\n\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n// import { BrowserRouter, Route } from 'react-router-dom';\n// import { library } from '@fortawesome/fontawesome-svg-core';\n// import { fabGithub } from '@fortawesome/free-solid-svg-icons';\nimport \"../styles/App.css\";\n//import Banner from './Banner';\n//import Content from './Content';\n// library.add(fabGithub);\n\n//import Header from './Header';\n// import Main from './Main';\n// import Footer from './Footer';\n// import Dashboard from './Dashboard';\n// import UrbanEcon from './UrbanEcon';\n// import ChapterOne from './ChapterOne';\n\n// <Banner />\n// <Content />\n\nclass App extends Component {\n    render() {\n        return (\n                <div className=\"wrapper\">\n                    <p>Hey! My name is Rob and this is my portfolio! Stay tuned to check out the latest from me! This should trigger a change...</p>\n                    <Link to=\"/tictactoe\"><button>Click this button to see my tic tac toe project</button></Link>\n                </div>\n        )\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Monty from './components/Monty';\nimport Chat from './components/Chat';\nimport Board from './components/Board';\nimport App from './components/App';\n\nReactDOM.render(\n    <BrowserRouter>\n        <div>\n            <Route exact path=\"/\" component={App} />\n            <Route exact path=\"/tictactoe\" component={Board} />\n            <Route exact path=\"/monty\" component={Monty} />\n            <Route exact path=\"/chat\" component={Chat} />\n        </div>\n    </BrowserRouter>,\n    document.querySelector('#root')\n)"],"sourceRoot":""}